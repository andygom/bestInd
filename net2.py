import numpy as np
from numpy import random
import time
from adafruit_servokit import ServoKit
kit = ServoKit channels=16 

#  INDIVIDUO CON experimento p100 g800 m0.5 / 5    -----      F I T N E S S  D E  41.59513354301453
# weightsIH = np.random.random  14, 14   * 2 - 1

weightsIH = [-1.54777539e-01,  3.97567849e-02,  4.52048525e+00, -3.17314212e-01,
        7.24028023e-03, -2.48570679e-02,  4.26078616e-02,  4.87324695e+00,
        3.01411514e-01,  5.87172588e-04,  1.12164266e-02,  2.42976642e-01,
       -2.64589355e+00, -3.06214023e-01] ,   [ 6.04021634e+00,  9.54626637e-02, -1.00867707e+00, -3.47528593e-02,
       -9.73591728e-04,  3.18560320e-02,  4.99005519e-01, -8.89079985e-02,
       -5.82909081e-01, -2.35788649e-02,  1.99146296e-02, -5.82767748e-02,
       -1.74785908e+00, -2.93027024e-02] ,   [-1.51699724e+00,  4.37666447e-03, -4.89639848e+00,  1.35873539e+00,
        3.68365849e-01,  2.48613136e+00, -3.08601962e-01, -2.92232446e-04,
       -8.74145558e-02, -2.91851448e-01, -2.05628778e-01,  2.52083014e+00,
       -1.28947720e-03, -3.69929251e-02] ,   [ 0.14579911, -1.44535398, -2.49183407,  0.00758193, -4.43960787,
        0.02008601,  1.81110337,  0.02337051,  0.89933651,  0.0151445 ,
        0.28026332,  1.27992345,  0.00706883,  0.0094326 ] ,   [ 1.32951538e+00, -5.73086615e+01,  1.03671386e-02,  1.21570260e-02,
        1.96064035e-02,  8.51626100e-01, -8.08900999e-01, -4.86461250e-03,
       -2.02892861e-01, -1.71484243e+00,  3.30024518e+00,  1.07100984e+00,
        3.17998921e-03,  7.33693948e+00] ,   [ 6.80707299e-03, -3.67101200e-06,  1.62081557e-03, -1.88921405e-02,
        9.15636781e-01,  4.65372421e-01, -8.53342040e+00, -3.06801838e-04,
       -1.16764701e-02,  8.06124183e+01,  1.95237981e-03,  2.02982693e-03,
        4.31600415e-01, -1.06953622e+00], [ -0.735408  ,  -4.79959472,  -4.88295444,   2.99831233,
        -0.23201268,   0.72127274,  -0.16440405,   1.56473089,
        -0.80455491,  -0.15161709,   2.03309716,   4.82994935,
       -39.57393979,   0.10524952] ,   [-6.52889688e-01, -3.65073043e-06, -4.72863396e-02, -6.53288053e-03,
        7.40784393e-04,  1.74601675e-07, -4.20163004e+00,  1.87500574e+00,
       -4.73172614e-02,  3.27867320e-04,  4.03536358e-01,  3.57936755e-04,
        2.15737525e-01, -1.29169651e-03] ,   [ 0.81003697,  0.06301062,  0.01348914, -0.00239483,  0.09335406,
        0.09145969,  0.59258431, -0.10885904,  0.71195307,  0.35145697,
       -0.00100081,  0.10498547,  0.03834157, -0.01673424] ,   [-4.47136142e-01,  1.66017884e-02, -2.68108730e-04,  2.53254091e-02,
       -4.22477072e-01,  6.86425278e+00,  4.19579834e-04, -3.13470103e-02,
       -7.78813803e-01, -4.84225080e-02, -2.57947551e+00, -2.35209442e+01,
        2.82571427e-01, -4.38408094e-01] ,   [-1.02214097e-01, -8.52361714e-03, -1.36938370e-03, -3.04682745e-02,
        2.32272429e-03,  2.67779175e-01, -9.28053379e-03, -1.39751671e+01,
        9.69162268e-01,  1.56430954e+01,  3.18741448e+00,  2.13396681e+00,
       -1.24319871e-01, -3.31242739e-01] ,   [-8.31733085e-03,  6.24562395e-01,  2.29482504e-01, -1.29478038e-05,
       -4.31860130e-01, -1.33050876e-02, -1.22589111e-01,  3.13219398e-01,
        2.24015841e-03, -2.99286762e-01,  2.79616335e+00,  3.87034570e+00,
        3.41529477e-03, -2.69008403e-03] ,   [ 3.01793423e-01,  1.07333295e-03, -9.40753656e-03,  1.52399436e+00,
       -5.00238702e-03,  4.19960440e-03, -3.89651445e-01,  3.75576098e-01,
       -9.24162139e-01, -6.79210679e-02,  1.82836481e-01, -2.15121976e+00,
        2.60675269e-05, -5.81125187e-01] ,   [-1.25071127e+00,  1.55093670e-03,  9.72488676e-02, -1.81658564e-01,
        2.63154709e-01,  1.06059966e+00,  7.55682575e-01,  1.22300220e+01,
       -3.82877006e-01, -6.24371026e-01,  5.03832361e-01, -2.30627898e-04,
        2.79594823e+00,  4.21651883e-03]

weightsHO = [-4.47886839e+00, -3.31166003e+00, -2.79549289e-03,  3.28100196e-02,
        2.81232253e-03,  6.82228809e-02,  2.71481567e-01, -7.63047637e-04] ,   [ 0.00432984, -0.01551173, -0.0128544 ,  0.48185824,  0.01291198,
       -0.596858  ,  1.91739179,  0.01029896] ,   [ 0.0203695 , -1.05618309,  0.4392908 ,  1.08797459, -0.01392269,
        0.71895939, -0.03282281, -0.00311812] ,   [ 1.24396883e-02,  1.28063624e+00,  4.34206120e-02,  6.35060286e-02,
       -3.62655848e-04,  5.64039364e-02,  1.71655858e-01, -2.23238369e+00] ,   [-1.55987332e-03, -1.51732573e+00,  1.61595016e+00,  5.38726536e+00,
        1.06416114e+00,  3.56895445e-01,  8.78055468e-01, -1.31792970e-02] ,   [ 7.29683476e-02,  3.46833309e-01, -4.38737482e-03,  5.88026465e+00,
       -9.78426363e-04,  1.45256560e-01,  1.41301485e-01, -9.50188095e-01] ,   [-7.61907953e+00,  4.19071036e+00,  2.47617837e-04,  3.10014161e+00,
        2.02174375e-01, -5.76716665e-01,  3.46695880e-02, -1.90269065e-01] ,   [ 1.64662423e-03, -1.86086350e-02,  1.14325565e-03,  1.99699248e-04,
       -3.82419161e+00, -2.01987400e+00, -1.98113863e-01, -1.68211285e-02] ,   [ 2.50639442e+01, -1.37985247e+01,  1.83691975e-02, -1.07348600e-04,
       -2.43145020e-02,  2.03147378e-03,  1.80075497e+00,  4.56989101e-01] ,   [-3.26075392e-04, -1.55227292e-01, -7.87569098e-01, -6.16532092e-03,
        6.55208375e-02,  7.93845780e-01,  5.30793630e-04, -4.70779262e-01] ,   [ 3.99853426e-03, -5.75598838e-01, -1.01445584e+00, -1.77048943e-02,
       -8.82624413e-02, -1.42993243e-01,  9.37698017e-01, -8.33155647e+00] ,   [ 3.12110112e-02, -4.18248831e-01,  1.35245606e-01,  1.62444393e-05,
       -3.86799715e-02, -1.01895529e-01, -3.24972460e-02, -1.11278307e-02] ,   [ 6.00281740e-02, -6.69332304e-01,  4.22212666e+00,  4.74948757e-02,
        2.64664699e-04, -3.57835926e-01, -2.26437572e+00,  4.12533257e-02] ,   [-5.39667493e-04, -1.69793240e-01,  3.76377519e-03,  3.74690477e+00,
       -7.73269959e-01, -1.79347299e-01,  7.04338269e-01, -1.38699779e-01]

neuronH = [0 for c in range(14)]

neuronO = [0 for c in range(8)]

motor = [0 for c in range(8)]

ultsensor = [0 for c in range(6)]


COUNT = 0


# normalizaci√≥n de los motores
def motorNorm(motorArray):

        print(motorArray)
        for i in range(0, len(motorArray)):

            motor[i] = ((motorArray[i] + 1) * 180) / 2
            
        print(motor)

            # if abs(motorArray[i] * 180) == 0:

            #     # -1 - 1
            #     180    0

            #     motor[i] = 90
            # else:
            #     motor[i] = abs(motorArray[i] * 180)
        # print(motor)

        kit.servo[0].angle = motor[0]
        kit.servo[1].angle = motor[1]
        kit.servo[2].angle = motor[2]
        kit.servo[3].angle = motor[3]
        kit.servo[4].angle = motor[4]
        kit.servo[5].angle = motor[5]
        kit.servo[6].angle = motor[6]
        kit.servo[7].angle = motor[7]
                
        # implementar mandar motor a los motores reales


# normalizacion de los sensotres ultrasonicos
def usNorm(usArray):
        for i in range(0, len(usArray)):

            ultsensor[i] = abs(usArray[i] * 20)


# entradas de los sensores 
def input():
    print('new inputs')

    sensorInput = np.random.random((3)) * 2 - 1


def network():

    sensorInput = np.random.random((14)) * 2 - 1
    

    print(COUNT)
    if COUNT == 0:
        sensorInput = np.random.random((14)) * 2 - 1
    else:
        for i in range(0, 6):
            sensorInput[i] = neuronO[i - 6]

        # for i in range(6, 14):
        #     sensorInput[i] = neuronO[i - 6]
        # print(sensorInput)
        
    # print(motor)

    # print(sensorInput)

    # print(weightsIH)

    for j in range(0, 14):
        for i in range(0, 14):

            anh = []

            anh.append(sensorInput[j] * weightsIH[j][i])

        # print(sum(anh))

        # print(anh)


        neuronH[j] = np.tanh(sum(anh))

        # dotN = np.dot(sensorInput, weightsIH[i])
        # neuronH[i] = np.tanh(dotN)

    # print(neuronH)

    for j in range(0, 8):
        for i in range(0, 14):

            anOP = []

            anOP.append(neuronH[j] * weightsIH[j][i])

        neuronO[j] = np.tanh(sum(anOP))
 
    # print(neuronO)

    # print(neuronO)

    motorNorm(neuronO)
    input()
    # sensorInput = np.random.random((14)) * 2 - 1

    # print(neuronH)
    # print(neuronO)

try:

    while True:
        # if COUNT == 0:

            # kit.servo[0].angle = 90
            # kit.servo[1].angle = 90
            # kit.servo[2].angle = 90
            # kit.servo[3].angle = 90
            # kit.servo[4].angle = 90
            # kit.servo[5].angle = 90
            # kit.servo[6].angle = 90
            # kit.servo[7].angle = 90

        network()
        COUNT = COUNT + 1
        
        # intentar no utilizar sleep y que sean intervalos iguales a los del simulador 
        time.sleep(2)

except KeyboardInterrupt:

    print("Press Ctrl-C to terminate while statement")

    pass
