import numpy as np
from numpy import random
import time
from adafruit_servokit import ServoKit
kit = ServoKit(channels=16)

# INDIVIDUO CON test3800gen80pop4mut    -----      F I T N E S S  D E  38.79013032913208
# weightsIH = np.random.random((14, 14)) * 2 - 1

weightsIH = [-4.04925344e-02, -2.46178371e-06,  1.18197666e-02,  2.01920318e-06,
       -2.27961595e-08,  4.08452409e-02, -2.19678933e-06,  1.07335636e-05,
        4.00793298e-09, -1.30416926e-06,  3.48303863e-06, -1.51233670e-05,
       -1.02387263e-03, -1.95442652e-06] ,   [-1.25134183e+02,  5.82129207e-04,  2.35249657e-01,  6.86546635e-02,
       -9.89867444e-03, -6.49549852e+00,  1.36645167e+00,  4.82858720e-07,
        2.17890568e-02,  5.96921242e-08, -1.97822013e-03, -3.74727730e-07,
        5.55945510e-01,  2.53360253e-04] ,   [ 1.78891881e+02,  5.99133210e-06, -4.96041315e-01,  2.78501671e+00,
       -2.75229360e-02, -1.42135374e+02, -1.47988337e-06, -8.54949489e-01,
       -1.74250875e-04, -4.16747652e-02, -9.90804693e-01, -4.91177277e+02,
       -1.02870075e-05, -8.26269156e-02] ,   [ 6.19425446e-10,  8.31401264e-03, -1.40681364e-07,  2.02939733e-09,
       -2.71224393e-07,  2.70409250e-07, -5.81676328e-01, -2.52988334e-07,
        9.37732785e-01,  3.68605529e-07,  5.34622416e-03, -3.97860003e-06,
        1.09356733e-05, -2.20898566e-01] ,   [ 6.26636374e-05,  6.82392185e-06, -6.88409630e+02, -4.56907568e-06,
       -3.70933382e-04, -2.04689008e+00, -1.77949378e-06,  9.11806953e-02,
        3.30296791e-02,  6.89159552e-06, -1.73466149e-05, -1.36913738e-13,
       -7.91707771e-03, -3.67313981e-05] ,   [-8.67299324e-02, -5.11713313e-02, -2.10886505e-01, -7.49334784e-02,
        8.61216811e-08, -1.06627720e+02, -8.65382766e-10,  5.84897263e-05,
       -7.40959909e-10,  4.11831523e+01,  1.21771345e-05,  3.21868715e-09,
        1.31061145e+00, -4.85100270e-04], [ 8.64089885e-10, -7.20222240e-06, -4.54627712e-03, -4.63766463e-05,
        2.37221750e-03,  8.79459322e-10,  5.03689312e-02,  1.17563919e-06,
       -1.42492688e-03,  1.93476572e-10, -7.95597593e+00, -4.06351206e-02,
       -2.08270344e-08,  9.30424253e+00] ,   [-3.27075208e-05,  8.05865646e-04, -9.07273978e-06, -5.01277662e-05,
        4.54570353e-03, -1.72663988e-05,  2.00374860e-05,  2.54297685e+03,
        5.57274914e-04,  1.21689125e-04,  3.48868945e-06, -1.27527987e-05,
        1.59278044e+01,  3.75745222e-02] ,   [-2.85251174e-05,  1.27481593e-02,  3.72649737e-03, -2.12899156e-01,
        4.84971683e-04, -1.63287797e-05, -6.02715207e-03, -2.49639225e-04,
       -3.59945723e-09,  9.53538542e-02, -3.55853137e-06,  8.07267178e-04,
       -5.46478477e-11, -5.19402379e-05] ,   [-2.24200367e-03, -2.65804940e+01, -3.06782515e-03, -6.57618377e-07,
       -2.81026732e-02, -7.56414680e-02, -8.54830551e-03,  1.29384965e-03,
       -1.00774927e-07,  3.74201013e-05,  3.75651177e-02, -1.03143970e-05,
       -1.70515525e-02,  3.20229174e+01] ,   [-5.49865621e-02,  2.77493069e-02, -1.20569841e-01, -5.02825317e-02,
       -8.73486607e-03,  1.77782419e-04,  4.04324255e-04,  3.21170038e-07,
       -1.36268654e-03, -1.44497849e-01, -2.48496239e-02, -5.36529293e-07,
        3.35634585e-06, -3.30043377e+01] ,   [ 4.50435994e-12,  2.23145664e-06,  3.46614556e-03, -2.26490527e-03,
       -5.78811489e-04, -5.93695149e-04,  1.56013200e-03, -1.92262930e-05,
       -1.16182855e-06,  1.43014142e+01, -8.34429400e+00,  1.97588613e-02,
       -1.15442991e-08,  1.35337731e-02] ,   [ 2.23314864e-05,  2.06941391e-02, -1.63673936e-01,  7.58684919e-06,
       -1.24072986e-05,  4.76988652e-01,  3.87305337e-05,  4.16768144e-02,
        1.13909532e-05, -2.17154731e-12, -6.31677560e-10, -4.39565523e-01,
        1.33602689e-05,  1.13709233e-05] ,   [-3.30279512e-07,  2.94122539e-07, -3.68259299e-04,  5.77626796e-06,
       -3.76758543e-02,  8.59780047e-05, -2.30046571e+00,  4.41812388e-05,
       -4.71871440e-07, -6.34105212e-05,  1.41982813e-06,  9.73318220e-01,
       -1.69094000e-04,  6.12139799e-10]

weightsHO = [ 3.36514969e-02, -5.54316216e-02, -2.39260567e+03,  3.14452922e-06,
        2.05553593e-06, -2.33734871e-03,  5.63482378e-06,  1.00446045e-06], [ 8.56363123e-03, -2.55092027e-03, -1.02700709e-03, -1.09219543e+01,
       -3.73930732e+00,  1.29810946e-02, -3.74154491e-05,  7.70412794e-06], [ 2.85021484e-06, -1.94432435e-02,  2.27047336e+01, -1.19223436e-05,
       -1.31074702e-01, -9.39439612e-05,  1.15799219e-07,  9.25797431e-05], [ 3.76625830e-14,  8.64944494e-07, -1.88013089e-07, -2.34509195e-01,
       -9.87260784e-11,  2.63180520e-06,  1.43459034e-05,  2.23552841e-07], [ 6.73242110e-04, -1.14141878e-06,  4.18761330e-05,  3.45046912e-01,
       -8.88920724e-06,  2.76475164e-02,  6.66159831e-05,  5.37265365e-02], [-7.17765084e-05, -1.54266999e-04, -4.01805920e-06, -1.05209723e-06,
       -3.80488525e-04,  2.36578563e-04, -1.97002638e+04, -5.27375711e-04], [ 1.36157446e-03, -7.22923309e-03,  2.52218411e-05,  3.54464911e-02,
        4.99588905e-10,  1.19570106e+00,  2.48643651e-03,  3.79597859e-03], [-1.76418924e-01,  1.83939717e-11,  1.06941545e-01, -2.53144015e-03,
        3.28659262e+01,  1.63617975e-05,  1.52325654e-05,  3.88597064e-01], [ 1.05455355e-04,  3.38674605e-04,  9.19813187e-10, -1.05973324e-06,
       -1.09162174e-01,  2.42843510e-02,  5.26254405e-04,  2.61371213e-01], [ 5.30951838e+00, -1.17055629e-03,  2.43948900e-03, -1.67365971e+01,
       -3.62660466e-05,  8.25419617e-04, -1.99884807e-06, -2.88847055e+01], [ 7.50937073e-04,  1.03624562e-04,  1.11882948e+01, -1.58410074e-06,
       -6.60698383e-06,  1.29331330e-03, -7.94124218e-03,  2.36552750e-04], [-5.53025265e-06,  1.26064982e-11,  5.76302681e-04,  1.21393844e-04,
       -1.98879819e-02,  9.14678654e+02,  9.14206605e-03,  5.98836219e-05], [ 8.58387684e-08, -6.38358803e-04, -2.57220308e-03, -3.15892321e-07,
       -4.64344273e+00,  4.01539130e-05, -4.06281893e-03, -1.22971178e-05], [-8.16489113e+01,  1.64212224e+02, -2.69767145e-07, -1.40125431e-04,
       -6.69222538e-05,  1.28214674e-03, -6.97558841e-03,  3.62485368e-05]



neuronH = [0 for c in range(14)]

neuronO = [0 for c in range(8)]

motor = [0 for c in range(8)]

ultsensor = [0 for c in range(6)]


COUNT = 0


# normalizaci√≥n de los motores
def motorNorm(motorArray):

        print(motorArray)
        for i in range(0, len(motorArray)):

            motor[i] = ((motorArray[i] + 1) * 180) / 2
            
        print(motor)

            # if abs(motorArray[i] * 180) == 0:

            #     # -1 - 1
            #     180    0

            #     motor[i] = 90
            # else:
            #     motor[i] = abs(motorArray[i] * 180)
        # print(motor)

        kit.servo[0].angle = motor[0]
        kit.servo[1].angle = motor[1]
        kit.servo[2].angle = motor[2]
        kit.servo[3].angle = motor[3]
        kit.servo[4].angle = motor[4]
        kit.servo[5].angle = motor[5]
        kit.servo[6].angle = motor[6]
        kit.servo[7].angle = motor[7]
                
        # implementar mandar motor a los motores reales


# normalizacion de los sensotres ultrasonicos
def usNorm(usArray):
        for i in range(0, len(usArray)):

            ultsensor[i] = abs(usArray[i] * 20)


# entradas de los sensores 
def input():
    print('new inputs')

    sensorInput = np.random.random((3)) * 2 - 1


def network():

    sensorInput = np.random.random((14)) * 2 - 1
    

    print(COUNT)
    if COUNT == 0:
        sensorInput = np.random.random((14)) * 2 - 1
    else:
        for i in range(0, 6):
            sensorInput[i] = neuronO[i - 6]

        # for i in range(6, 14):
        #     sensorInput[i] = neuronO[i - 6]
        # print(sensorInput)
        
    # print(motor)

    # print(sensorInput)

    # print(weightsIH)

    for j in range(0, 14):
        for i in range(0, 14):

            anh = []

            anh.append(sensorInput[j] * weightsIH[j][i])

        # print(sum(anh))

        # print(anh)


        neuronH[j] = np.tanh(sum(anh))

        # dotN = np.dot(sensorInput, weightsIH[i])
        # neuronH[i] = np.tanh(dotN)

    # print(neuronH)

    for j in range(0, 8):
        for i in range(0, 14):

            anOP = []

            anOP.append(neuronH[j] * weightsIH[j][i])

        neuronO[j] = np.tanh(sum(anOP))
 
    # print(neuronO)

    # print(neuronO)

    motorNorm(neuronO)
    input()
    # sensorInput = np.random.random((14)) * 2 - 1

    # print(neuronH)
    # print(neuronO)

try:

    while True:
        # if COUNT == 0:

            # kit.servo[0].angle = 90
            # kit.servo[1].angle = 90
            # kit.servo[2].angle = 90
            # kit.servo[3].angle = 90
            # kit.servo[4].angle = 90
            # kit.servo[5].angle = 90
            # kit.servo[6].angle = 90
            # kit.servo[7].angle = 90

        network()
        COUNT = COUNT + 1
        
        # intentar no utilizar sleep y que sean intervalos iguales a los del simulador 
        time.sleep(2)

except KeyboardInterrupt:

    print("Press Ctrl-C to terminate while statement")

    pass
