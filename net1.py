import numpy as np
from numpy import random
import time
# from adafruit_servokit import ServoKit
# kit = ServoKit channels=16 

#  INDIVIDUO CON experimento p200 g400 m3    -----      F I T N E S S  D E  41.54188412576914


# weightsIH = np.random.random  14, 14   * 2 - 1

weightsIH =  [ 7.61063075e-02,  5.71023767e-01, -8.71577917e-01,  5.89224557e-01,
       -7.82021838e-01,  1.40725448e-06,  1.39934698e-02, -1.38414219e-02,
        7.69028842e-02,  2.95316234e-01,  9.87704546e-04, -1.65989583e+02,
        6.51218734e-01,  3.07218860e-04] ,   [ 0.00903337, -0.02656129,  0.04721418, -0.02755379, -0.04237676,
       -0.11528337,  0.02146062,  0.04350259, -0.02873447,  0.7663498 ,
       -0.31365177,  0.01811806,  0.03463969, -1.93856165] ,   [-3.25234391e-06, -5.22886328e-02, -5.59503367e-03, -6.07899945e-04,
        2.19418500e-02, -6.50801884e-05,  6.35133306e-01, -5.83112086e+00,
        1.74677857e+00,  1.34382670e-04, -5.43842090e-05,  2.59064773e-02,
       -5.60197953e-04, -7.44691412e-03] ,   [ 1.73963445e-01, -1.06546407e-05,  1.02423402e+00,  1.58560440e-01,
        6.08017292e-03, -7.08915079e-05, -9.85051178e+00, -1.17820216e-02,
       -3.41324224e-01, -6.78525491e-03,  4.31391983e+00,  2.49655260e-01,
       -1.29120179e-01,  2.66299948e-04] ,   [ 2.36196990e-02, -2.71837836e+00,  1.05810527e-06,  6.74494269e-02,
       -2.35435806e+00,  1.74700463e+01, -3.93544886e-03, -8.30127350e-02,
       -2.41021810e-02, -2.52976498e-03, -1.50169021e-01, -6.11210690e-02,
        5.74962877e+00, -1.58639035e-03] ,   [ 7.17015248e+01,  1.10495113e+00, -7.31342250e-04,  9.48169124e-01,
       -3.75131753e-03, -5.47949287e-01, -1.27281369e-01, -2.91464161e-03,
       -1.51398791e-03,  7.86264595e-01, -5.54908407e-03,  2.99383834e-01,
       -1.06366368e+01,  1.67021110e-01] ,  [ 1.12744065e-03,  2.22007382e+01,  7.75170973e-04, -1.23124501e-04,
       -6.72285825e-04, -4.12152656e-03, -8.36903899e-03,  1.86695858e-02,
       -2.10644265e+00,  6.59921465e-03, -5.00883618e-07, -1.24287283e-01,
        1.30655352e-01,  5.20383649e-01] ,   [ 3.12081605e-01,  5.58293944e-02,  1.18412080e+00, -5.14105736e-02,
       -7.79246734e-03, -1.49833840e+01,  2.87999176e-02, -4.84574017e-02,
        1.89060047e+00,  1.90011438e+00, -3.92034895e-03,  1.87061996e-01,
        2.69715229e+00, -6.62382492e-05] ,   [-1.67842959e+00,  4.48706057e+00,  1.17607425e-04, -5.85260934e-03,
        3.32435296e-07,  2.30556001e-02,  5.47765254e-01,  1.42255931e-01,
        9.73882132e-03, -7.64008502e-07, -7.09500387e-02, -1.04852447e-02,
       -1.17357387e-01,  2.04536499e-01] ,   [ 1.98333360e-01, -2.17134066e-04,  2.56026338e-05, -2.02685074e-02,
       -2.52456412e-03,  2.71711473e-01, -1.06549605e-01,  1.53167662e-03,
        1.20842710e-02,  7.70173959e-02,  2.20925296e-04,  3.22462115e-03,
        1.31917973e-02, -8.24913356e-02] ,   [ 1.04563075e-05, -3.26849350e+01,  1.82272977e-03,  3.66055941e-02,
        3.75039091e-03, -1.12843868e-02,  4.49855621e-02,  4.72830084e-03,
        1.35646170e-03, -1.48498075e-01, -9.59626032e-04,  2.79361821e+00,
        4.80510104e-03, -7.80572544e-04] ,   [-7.26876776e-01,  2.60732149e-04,  2.27900863e+00,  1.89141744e+00,
        8.73707453e-03, -5.60798195e+00, -1.47522161e-02, -1.82036090e-02,
       -1.33970237e-01,  4.04351139e-02, -1.27526015e-04,  9.27416982e-01,
       -6.92693421e-03, -6.42811098e+01] ,   [-7.17880819e-03, -3.87663687e-04, -2.74970392e+00, -7.90800131e-03,
       -9.44192902e-01, -1.02979514e+00, -7.59715140e-05, -3.76596548e-01,
        7.12083200e-02,  5.84012867e-05,  1.30859885e+00,  1.29396689e+00,
        1.93347505e-02,  8.22053500e-04] ,   [ 2.22266106e-02, -3.73402655e-02,  1.81678593e-01, -3.85098542e-03,
        3.13516464e-06,  1.90084430e+00, -1.43281088e-02, -1.36470851e+01,
        2.11965195e+01, -3.19536944e+00, -2.58906921e-02,  5.09043378e-02,
       -3.91931570e-02, -4.28582917e-03] 

weightsHO =  [-1.71729600e-02, -1.06846260e-02, -4.23674590e-02,  2.12296971e-04,
       -3.05588380e+00,  8.40968481e+01, -6.08637179e-02,  6.80243227e-06] ,   [-1.96097313e+01,  4.76276441e-02, -1.06620357e-02, -2.46985919e-03,
       -2.17284266e+02,  5.87944707e+00, -1.01320866e-04, -8.67480468e-01] ,   [-3.65333322e-02,  1.45746120e+01, -1.02341797e-03, -2.02441923e-02,
        2.77966063e-02, -4.75873719e-03,  6.17774364e-06,  6.09856909e-01] ,   [-1.58952464e-02,  8.46653857e-05,  6.53999652e-02,  3.13135720e-04,
        3.47746450e-02,  3.96440110e-02,  4.19740902e+00,  6.65664699e-01] ,   [ 1.68124752e-03,  9.03411649e-04,  2.27004406e-03,  3.89657634e-02,
        1.72741453e-04,  5.79595324e-04, -1.29031358e-03, -1.98293595e-01] ,   [3.43631583e-05, 5.43239102e-02, 3.23019982e-04, 7.20760369e-01,
       3.03894939e-04, 3.74155691e-06, 3.51107613e-02, 1.13751422e+00] ,   [-1.77433429e-02, -1.48976137e-03, -7.46290482e-05, -2.09028704e+00,
       -1.88868349e-03, -1.28785781e+00,  8.24807769e-06,  6.19883849e+00] ,   [2.30590921e-03, 5.13903330e+01, 2.26513085e+02, 3.10556065e-02,
       5.39814635e-01, 2.36180192e-02, 3.26810012e-02, 1.04108199e+00] ,   [ 4.16680773e-05,  1.04007404e-02,  2.10829593e-01,  6.63201279e-04,
       -2.96111338e-04,  1.61508273e-02,  1.63983149e+00,  1.81037547e-04] ,   [ 8.98711704e-01, -1.20961446e-01,  9.22435718e-06, -3.13317727e-02,
       -8.97536837e-03,  2.69923419e-02,  9.34182578e-03,  3.28223088e-08] ,   [ 2.03616244e-02, -5.45439066e+00,  2.99953716e-02, -8.63180906e-02,
        4.39962152e-02,  3.46461991e-04,  1.97737127e-01,  2.39424780e-05] ,   [ 7.16293840e-01, -6.14419778e-08, -3.75580231e-03, -2.49152628e+01,
       -2.44361852e-01,  1.47416596e+00, -3.22896269e+01, -4.98216182e-03] ,   [-1.96901761e+00, -3.57023143e-05,  4.01040496e-02, -4.50325024e-01,
        2.51990739e+01,  2.01604808e-04, -1.51502460e-03, -4.61247913e-02] ,   [-2.54767682e-01,  2.68575348e+01, -2.00659930e-03,  8.75407050e-01,
       -1.87069592e-01, -7.60263966e-01, -4.80917624e-05, -6.65977245e+01]

neuronH = [0 for c in range(14)]

neuronO = [0 for c in range(8)]

motor = [0 for c in range(8)]

ultsensor = [0 for c in range(6)]


COUNT = 0


# normalizaci√≥n de los motores
def motorNorm(motorArray):

        print(motorArray)
        for i in range(0, len(motorArray)):

            motor[i] = ((motorArray[i] + 1) * 180) / 2
            
        print(motor)

            # if abs(motorArray[i] * 180) == 0:

            #     # -1 - 1
            #     180    0

            #     motor[i] = 90
            # else:
            #     motor[i] = abs(motorArray[i] * 180)
        # print(motor)

        kit.servo[0].angle = motor[0]
        kit.servo[1].angle = motor[1]
        kit.servo[2].angle = motor[2]
        kit.servo[3].angle = motor[3]
        kit.servo[4].angle = motor[4]
        kit.servo[5].angle = motor[5]
        kit.servo[6].angle = motor[6]
        kit.servo[7].angle = motor[7]
                
        # implementar mandar motor a los motores reales


# normalizacion de los sensotres ultrasonicos
def usNorm(usArray):
        for i in range(0, len(usArray)):

            ultsensor[i] = abs(usArray[i] * 20)


# entradas de los sensores 
def input():
    print('new inputs')

    sensorInput = np.random.random((3)) * 2 - 1


def network():

    sensorInput = np.random.random((14)) * 2 - 1
    

    print(COUNT)
    if COUNT == 0:
        sensorInput = np.random.random((14)) * 2 - 1
    else:
        for i in range(0, 6):
            sensorInput[i] = neuronO[i - 6]

        # for i in range(6, 14):
        #     sensorInput[i] = neuronO[i - 6]
        # print(sensorInput)
        
    # print(motor)

    # print(sensorInput)

    # print(weightsIH)

    for j in range(0, 14):
        for i in range(0, 14):

            anh = []

            anh.append(sensorInput[j] * weightsIH[j][i])

        # print(sum(anh))

        # print(anh)


        neuronH[j] = np.tanh(sum(anh))

        # dotN = np.dot(sensorInput, weightsIH[i])
        # neuronH[i] = np.tanh(dotN)

    # print(neuronH)

    for j in range(0, 8):
        for i in range(0, 14):

            anOP = []

            anOP.append(neuronH[j] * weightsIH[j][i])

        neuronO[j] = np.tanh(sum(anOP))
 
    # print(neuronO)

    # print(neuronO)

    motorNorm(neuronO)
    input()
    # sensorInput = np.random.random((14)) * 2 - 1

    # print(neuronH)
    # print(neuronO)

try:

    while True:
        # if COUNT == 0:

            # kit.servo[0].angle = 90
            # kit.servo[1].angle = 90
            # kit.servo[2].angle = 90
            # kit.servo[3].angle = 90
            # kit.servo[4].angle = 90
            # kit.servo[5].angle = 90
            # kit.servo[6].angle = 90
            # kit.servo[7].angle = 90

        network()
        COUNT = COUNT + 1
        
        # intentar no utilizar sleep y que sean intervalos iguales a los del simulador 
        time.sleep(2)

except KeyboardInterrupt:

    print("Press Ctrl-C to terminate while statement")

    pass
